generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Car         Car[]

  @@map("categories")
}

model Specification {
  id               String             @id @default(uuid())
  name             String
  description      String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  CarSpecification CarSpecification[]

  @@map("specifications")
}

model User {
  id             String   @id @default(uuid())
  name           String
  password       String
  email          String   @unique
  driver_license String
  avatar         String?
  isAdmin        Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  Rentals Rentals[]
  @@map("users")
}

model Car {
  id             String             @id @default(uuid())
  name           String
  description    String
  daily_rate     Int
  available      Boolean            @default(true)
  license_plate  String
  fine_amount    Int
  brand          String
  category_id    String?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  category       Category?          @relation(fields: [category_id], references: [id])
  specifications CarSpecification[]

  images  CarImages[]
  Rentals Rentals[]
  @@map("cars")
}

model CarImages {
  id         String   @id @default(uuid())
  car_id     String
  filename   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  car Car @relation(fields: [car_id], references: [id])
  @@map("car_images")
}

model CarSpecification {
  id               String        @id @default(uuid())
  car_id           String
  specification_id String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  car              Car           @relation(fields: [car_id], references: [id], onDelete: SetNull)
  specification    Specification @relation(fields: [specification_id], references: [id], onDelete: SetNull)

  @@map("car_specifications")
}

model Rentals {
  id                   String   @id @default(uuid())
  start_date           DateTime @default(now())
  end_date             DateTime
  expected_return_date DateTime
  total                Int
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  car_id               String
  car                  Car      @relation(fields: [car_id], references: [id])
  user_id              String
  user                 User     @relation(fields: [user_id], references: [id])

  @@map("rentals")
}
